const { rmSync, writeFileSync } = require('fs');
const { join } = require('path');
const remixConfig = require('@remix-run/dev/config'); // read and generate Remix config
const { MY_PLUGIN_NAME, MY_NAME, REMIX_CONFIG } = require('./constants');

/**
 *
 * @description generate and overwrite remix.config.js
 * @param {*} inv
 * @returns {Promise<remixConfig.RemixConfig>}
 */
async function generateConfig(inv) {
  const {
    _project: { arc, cwd },
  } = inv;

  // create a recommended remix.config.js
  // Remix takes user input from remix.config.js and creates a complete configuration

  // TODO: allow user to extend further
  // ? merge from existing
  // look at @remix options:
  for (const option of arc[MY_NAME]) {
    if (Array.isArray(option) && option[0] === 'appDirectory')
      REMIX_CONFIG.appDirectory = option[1];
  }

  // it would be nice to write to BUILD_DIR, but it must be a sibling of package.json
  rmSync(join(cwd, 'remix.config.js'), { force: true });
  writeFileSync(
    join(cwd, 'remix.config.js'),
    `
// Automatically generated by ${MY_PLUGIN_NAME}
module.exports = ${JSON.stringify({ ...REMIX_CONFIG }, null, 2)}
    `.trim()
  );

  return await remixConfig.readConfig(cwd);
}

/**
 *
 * @description remove BUILD_DIR and remix.config.js
 * @param {*} inv
 * @returns {void}
 */
function cleanup(inv) {
  const {
    _project: { build, cwd },
  } = inv;

  rmSync(build, { recursive: true, force: true });
  rmSync(join(cwd, 'remix.config.js'));
}

module.exports = {
  cleanup,
  generateConfig,
};
